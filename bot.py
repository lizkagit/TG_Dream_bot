#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
import config
from parser import parse_dream_symbol
from db_utils import init_db, save_interpretation, get_cached_interpretation
import logging
from nlp_utils import extract_keywords

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_FOR_DREAM = 1

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
init_db()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–æ–≤.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/analyze - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–Ω\n"
        "/interpret - –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /analyze –∏ –æ–ø–∏—à–∏ —Å–≤–æ–π —Å–æ–Ω, –∫–æ–≥–¥–∞ —è –ø–æ–ø—Ä–æ—à—É."
    )

async def analyze_dream_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–∞"""
    await update.message.reply_text("üí≠ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —Å–≤–æ–π —Å–æ–Ω –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:")
    return WAITING_FOR_DREAM

async def receive_dream_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ"""
    dream_text = update.message.text
    user_id = update.effective_user.id
    
    try:
        symbols = extract_keywords(dream_text, top_n=5)
        
        if not symbols:
            await update.message.reply_text("–ù–µ –Ω–∞—à—ë–ª –∑–Ω–∞—á–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Å–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –æ–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
            return ConversationHandler.END
        
        response = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–∞:\n\n"
        found_interpretations = False
        
        for symbol in symbols:
            try:
                cached = get_cached_interpretation(symbol)
                
                if cached:
                    interpretation = cached
                else:
                    interpretation = parse_dream_symbol(symbol)
                    if interpretation and interpretation != "–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.":
                        save_interpretation(user_id, symbol, interpretation)
                
                if interpretation and interpretation != "–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.":
                    response += f"üîÆ {symbol.capitalize()}:\n{interpretation}\n\n"
                    found_interpretations = True
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–º–≤–æ–ª–∞ {symbol}: {e}")
                continue
        
        if not found_interpretations:
            response = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤ –≤ –≤–∞—à–µ–º —Å–Ω–µ."
        
        await update.message.reply_text(response[:4000])
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    
    return ConversationHandler.END

async def interpret_symbol_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–∞"""
    await update.message.reply_text("üîÆ –ö–∞–∫–æ–π —Å–∏–º–≤–æ–ª –∏–∑ —Å–Ω–∞ —Ç—ã —Ö–æ—á–µ—à—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å?")
    return WAITING_FOR_DREAM

async def receive_symbol_for_interpretation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–∏–º–≤–æ–ª –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏"""
    symbol = update.message.text
    try:
        interpretation = parse_dream_symbol(symbol)
        await update.message.reply_text(f"üîÆ {symbol.capitalize()}:\n{interpretation}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–∞ {symbol}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    
    return ConversationHandler.END

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    await update.message.reply_text(
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–Ω–æ–≤:\n"
        "–í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: 10 —Å–Ω–æ–≤\n"
        "–ß–∞—Å—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã: –≤–æ–¥–∞ (3), –∑–º–µ—è (2), –ø–æ–ª—ë—Ç (2)\n"
        "–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—â–∏–π —Ç–æ–Ω: –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π (60%)"
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

def main():
    app = Application.builder().token(config.TELEGRAM_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–Ω–∞
    conv_handler_analyze = ConversationHandler(
        entry_points=[CommandHandler("analyze", analyze_dream_start)],
        states={
            WAITING_FOR_DREAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_dream_description)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–∞
    conv_handler_interpret = ConversationHandler(
        entry_points=[CommandHandler("interpret", interpret_symbol_start)],
        states={
            WAITING_FOR_DREAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_symbol_for_interpretation)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler_analyze)
    app.add_handler(conv_handler_interpret)
    app.add_handler(CommandHandler("stats", show_stats))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

if __name__ == "__main__":
    main()